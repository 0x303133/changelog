import { Config } from "./config";
import { PullRequest, Release } from "./changelog";

const changelog = `## Changelog.`;
const watermark = `#### It was automatically generated by [0x303133/changelog](https://github.com/0x303133/changelog).`;

export class Render {
  constructor(private readonly config: Config) {}

  public markdown(releases: Release[]) {
    const markdown = releases
      .map((release) => this.renderRelease(release))
      .reverse()
      .filter(Boolean)
      .join("\n\n\n");
    return `${changelog}\n${watermark}\n\n${markdown}`;
  }

  private renderRelease(release: Release) {
    let markdown = `## ${release.title}`;
    // Create pull request categories
    const categories = this.groupByCategories(release.pulls);
    for (const category of categories) {
      markdown += `\n\n#### ${category.label}\n`;
      // Check if we have monorepo
      if (this.hasPackages(category.pulls)) {
        markdown += this.renderContributionsByPackage(category.pulls);
      } else {
        markdown += this.renderContributionList(category.pulls);
      }
    }
    // Create contributors list
    if (release.contributors?.length) markdown += `\n\n${this.renderContributorList(release.contributors)}`;

    markdown += this.renderFullChangelog(release);

    return markdown;
  }

  private groupByCategories(pulls: PullRequest[]) {
    const labels = Object.keys(this.config.labels);

    const other = pulls.filter((pull) => {
      if (!pull.labels) return true;

      if (pull.labels) {
        const pullLabels = pull.labels.map((value) => value.name);
        if (!pullLabels.some((label) => labels.indexOf(label) >= 0)) return true;
      }

      return false;
    });

    const categories = labels.map((label) => {
      const sorted = pulls.filter((pull) => {
        if (!pull.labels) return false;

        const pullLabels = pull.labels.map((value) => value.name);

        if (pullLabels.indexOf(label) !== -1) return true;
      });

      return { label, pulls: sorted };
    });

    return [...categories, { label: "Other", pulls: other }].filter((category) => category.pulls.length > 0);
  }

  private hasPackages(pulls: PullRequest[]) {
    return pulls.some((pull) => pull.packages !== undefined && pull.packages.length > 0);
  }

  private renderContributionsByPackage(pulls: PullRequest[]) {
    // Group commits in category by package
    const commitsByPackage: { [id: string]: PullRequest[] } = {};
    for (const pull of pulls) {
      // Array of unique packages.
      const changedPackages = pull.packages || [];

      const packageName = this.renderPackageNames(changedPackages);

      commitsByPackage[packageName] = commitsByPackage[packageName] || [];
      commitsByPackage[packageName].push(pull);
    }

    const packageNames = Object.keys(commitsByPackage);

    return packageNames
      .map((packageName) => {
        const pkgCommits = commitsByPackage[packageName];
        return `* ${packageName}\n${this.renderContributionList(pkgCommits)}`;
      })
      .join("\n");
  }

  private renderPackageNames(packageNames: string[]) {
    return packageNames.length > 0 ? packageNames.map((pkg) => `\`${pkg}\``).join(", ") : "Other";
  }

  private renderContributionList(pulls: PullRequest[]): string {
    return pulls
      .map((pull) => this.renderContribution(pull))
      .filter(Boolean)
      .map((rendered) => `  ${this.config["commits-marker"]} ${rendered}`)
      .join("\n");
  }

  private renderContribution(pull: PullRequest): string {
    let markdown = ``;

    if (pull.number) markdown += `[#${pull.number}](https://github.com/${this.config.repository}/pull/${pull.number}) `;

    markdown += `${pull.title} ([@${pull.user.login}](${pull.user.html_url}))`;

    return markdown;
  }

  private renderContributorList(contributors: string[]) {
    const renderedContributors = contributors
      .map((contributor) => `${this.config["contributors-marker"]} [@${contributor}](https://github.com/${contributor})`)
      .sort();

    return `#### Committers: ${contributors.length}\n${renderedContributors.join("\n")}`;
  }

  private renderFullChangelog(release: Release) {
    return `\n#### Full changelog: [\`${release.system_title}\`](https://github.com/${this.config.repository}/compare/${release.system_title})`;
  }
}
